xfO8FWzQledSn

Sonar-Token =squ_4ba7a76fe537d

github token= ghp_yQpDPGlG92EG0d


export AWS_ACCESS_KEY_ID=AKIAXY
export AWS_SECRET_ACCESS_KEY=VmMex9Hu5
export AWS_DEFAULT_REGION=us-east-1
export AWS_CONFIG_FILE="/root/.aws/config"
export TF_VAR_AWS_REGION=us-east-1
export TF_VAR_AWS_ACCOUNT_ID=534


Twotier-EKS-Cluster

aws eks update-kubeconfig --region us-east-1 --name Twotier-EKS-Cluster

curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json

aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json

eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=Twotier-EKS-Cluster --approve

eksctl create iamserviceaccount --cluster=Twotier-EKS-Cluster --namespace=kube-system --name=aws-load-balancer-controller --role-name AmazonEKSLoadBalancerControllerRole --attach-policy-arn=arn:aws:iam::534659817240:policy/AWSLoadBalancerControllerIAMPolicy --approve --region=us-east-1

eksctl get iamserviceaccount --cluster Twotier-EKS-Cluster --name aws-load-balancer-controller --namespace kube-system
  arn:aws:iam::534659817240:role/AmazonEKSLoadBalancerControllerRole



eksctl create iamserviceaccount \    
--cluster=Twotier-EKS-Cluster \  
--namespace=kube-system \  
--name=aws-load-balancer-controller \  
--attach-policy-arn=arn:aws:iam::534659817240:policy/AWSLoadBalancerControllerIAMPolicy \  
--override-existing-serviceaccounts \  
--approve

If you had installed the 0.1.x version of eks-charts/aws-load-balancer-controller chart earlier, the upgrade to chart version 1.0.0 will not work due to incompatibility of the webhook api version, uninstall as follows

$ helm delete aws-load-balancer-controller -n kube-system
Uninstalling the Chart
helm delete aws-load-balancer-controller -n kube-system

# If you setup IAM Roles for ServiceAccount, you can cleanup as follows

eksctl delete iamserviceaccount --cluster <cluster-name> --namespace kube-system --name aws-load-balancer-controller

# helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=Twotier-EKS-Cluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller

sudo snap install helm --classic

helm repo add eks https://aws.github.io/eks-charts

helm repo update eks

helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=Twotier-EKS-Cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller

helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=my-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller

kubectl get deployment -n kube-system aws-load-balancer-controller

# Error fix for helm load balancer;

 # kubectl get secrets --all-namespaces | grep sh.helm 

# kubectl delete secret sh.helm.release.v1.aws-load-balancer-controller.v1 -n kube-system

# helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=Twotier-EKS-Cluster \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controlle

helm install aws-load-balancer-controller eks/aws-load-balancer-controller \      
--set clusterName=Twotier-EKS-Cluster \  
--set serviceAccount.create=false \  
--set region=us-east-1 \  
--set vpcId=vpc-01ac26ec9b0d65de6 \  
--set serviceAccount.name=aws-load-balancer-controller \  
-n kube-system

# example= aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com


aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 534659817240.dkr.ecr.us-east-1.amazonaws.com

kubectl create secret generic ecr-registry-secret \
  --from-file=.dockerconfigjson=${HOME}/.docker/config.json \
  --type=kubernetes.io/dockerconfigjson --namespace three-tier


kubectl get secrets -n three-tier

kubectl create namespace argocd

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.7/manifests/install.yaml

kubectl get pods -n argocd

kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

Now, we need to get the password for our argoCD server to perform the deployment.

To do that, we have a pre-requisite which is jq. Install it by the command below.

sudo apt install jq -y
export ARGOCD_SERVER='kubectl get svc argocd-server -n argocd -o json | jq - raw-output '.status.loadBalancer.ingress[0].hostname''
export ARGO_PWD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
echo $ARGO_PWD






sonar-scanner \
  -Dsonar.projectKey=three-tier-frontend \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://54.147.242.72:9000 \
  -Dsonar.login=squ_4ba7a76fe537dcf6fd124a541fee736465c5a3a4


sonar-scanner \
  -Dsonar.projectKey=three-tier-backend \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://54.147.242.72:9000 \
  -Dsonar.login=squ_4ba7a76fe537dcf6fd124a541fee736465c5a3a4


